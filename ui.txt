-- UILibrary.lua
local UILibrary = {}
UILibrary.__index = UILibrary

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- Constants
local ANIMATION_SPEED = 0.3
local DEFAULT_THEME = {
    Background = Color3.fromRGB(30, 30, 30),
    Foreground = Color3.fromRGB(40, 40, 40),
    TextColor = Color3.fromRGB(255, 255, 255),
    AccentColor = Color3.fromRGB(85, 170, 255),
    BorderColor = Color3.fromRGB(60, 60, 60)
}

-- Variables
local localPlayer = Players.LocalPlayer
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Utility Functions
local function createTween(instance, properties, duration, easingStyle, easingDirection)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or ANIMATION_SPEED, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out),
        properties
    )
    return tween
end

local function createInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function makeDraggable(frame, handle)
    local dragToggle = nil
    local dragInput = nil
    local dragStart = nil
    local startPos = nil
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    handle.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            updateInput(input)
        end
    end)
end

-- Main Library Constructor
function UILibrary.new(title, theme)
    local self = setmetatable({}, UILibrary)
    
    self.title = title or "UI Library"
    self.theme = theme or DEFAULT_THEME
    self.tabs = {}
    self.activeTab = nil
    self.config = {}
    self.configID = HttpService:GenerateGUID(false)
    
    self:Initialize()
    return self
end

function UILibrary:Initialize()
    -- Create main GUI
    self.gui = createInstance("ScreenGui", {
        Name = "UILibrary",
        Parent = (RunService:IsStudio() and localPlayer.PlayerGui) or CoreGui,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Create main frame
    self.mainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Parent = self.gui,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -250, 0.5, -175),
        Size = UDim2.new(0, 500, 0, 350),
        ClipsDescendants = true,
        Active = true
    })
    
    -- Add corner radius
    local cornerRadius = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = self.mainFrame
    })
    
    -- Create title bar
    self.titleBar = createInstance("Frame", {
        Name = "TitleBar",
        Parent = self.mainFrame,
        BackgroundColor3 = self.theme.Foreground,
        Size = UDim2.new(1, 0, 0, 30),
        BorderSizePixel = 0
    })
    
    local titleCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = self.titleBar
    })
    
    local titleCornerFix = createInstance("Frame", {
        Name = "CornerFix",
        Parent = self.titleBar,
        BackgroundColor3 = self.theme.Foreground,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0)
    })
    
    -- Create title text
    self.titleText = createInstance("TextLabel", {
        Name = "Title",
        Parent = self.titleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -80, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = self.title,
        TextColor3 = self.theme.TextColor,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Create minimize button
    self.minimizeButton = createInstance("TextButton", {
        Name = "MinimizeButton",
        Parent = self.titleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = "-",
        TextColor3 = self.theme.TextColor,
        TextSize = 20
    })
    
    -- Create close button
    self.closeButton = createInstance("TextButton", {
        Name = "CloseButton",
        Parent = self.titleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = "Ã—",
        TextColor3 = self.theme.TextColor,
        TextSize = 20
    })
    
    -- Create tab container
    self.tabContainer = createInstance("Frame", {
        Name = "TabContainer",
        Parent = self.mainFrame,
        BackgroundColor3 = self.theme.Foreground,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(0, 120, 1, -30)
    })
    
    local tabContainerCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = self.tabContainer
    })
    
    local tabCornerFix = createInstance("Frame", {
        Name = "CornerFix",
        Parent = self.tabContainer,
        BackgroundColor3 = self.theme.Foreground,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0)
    })
    
    -- Create tab buttons container
    self.tabButtons = createInstance("ScrollingFrame", {
        Name = "TabButtons",
        Parent = self.tabContainer,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 10),
        Size = UDim2.new(1, 0, 1, -10),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = self.theme.AccentColor,
        BorderSizePixel = 0
    })
    
    local tabButtonsLayout = createInstance("UIListLayout", {
        Parent = self.tabButtons,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    local tabButtonsPadding = createInstance("UIPadding", {
        Parent = self.tabButtons,
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10)
    })
    
    -- Create content container
    self.contentContainer = createInstance("Frame", {
        Name = "ContentContainer",
        Parent = self.mainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 120, 0, 30),
        Size = UDim2.new(1, -120, 1, -30),
        ClipsDescendants = true
    })
    
    -- Make the window draggable
    makeDraggable(self.mainFrame, self.titleBar)
    
    -- Minimize button functionality
    self.minimized = false
    self.minimizeButton.MouseButton1Click:Connect(function()
        self:ToggleMinimize()
    end)
    
    -- Close button functionality
    self.closeButton.MouseButton1Click:Connect(function()
        self:Close()
    end)
    
    -- Load configuration if it exists
    self:LoadConfig()
end

-- Minimize/Maximize functionality
function UILibrary:ToggleMinimize()
    self.minimized = not self.minimized
    
    local targetSize = self.minimized and UDim2.new(1, 0, 0, 30) or UDim2.new(1, 0, 1, 0)
    local targetText = self.minimized and "+" or "-"
    
    createTween(self.mainFrame, {Size = targetSize}, ANIMATION_SPEED * 1.5):Play()
    self.minimizeButton.Text = targetText
end

-- Close functionality
function UILibrary:Close()
    createTween(self.mainFrame, {Position = UDim2.new(1.5, 0, self.mainFrame.Position.Y.Scale, self.mainFrame.Position.Y.Offset)}, ANIMATION_SPEED):Play()
    wait(ANIMATION_SPEED)
    self.gui:Destroy()
end

-- Tab creation
function UILibrary:AddTab(name, icon)
    local tab = {}
    tab.name = name
    tab.icon = icon
    tab.sections = {}
    
    -- Create tab button
    tab.button = createInstance("TextButton", {
        Name = name .. "Button",
        Parent = self.tabButtons,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Font = Enum.Font.SourceSansSemibold,
        Text = name,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        AutoButtonColor = false
    })
    
    local tabButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = tab.button
    })
    
    -- Add icon if provided
    if icon then
        local iconImage = createInstance("ImageLabel", {
            Name = "Icon",
            Parent = tab.button,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 5, 0.5, -8),
            Size = UDim2.new(0, 16, 0, 16),
            Image = icon,
            ImageColor3 = self.theme.TextColor
        })
        
        tab.button.TextXAlignment = Enum.TextXAlignment.Right
    end
    
    -- Create tab content
    tab.container = createInstance("ScrollingFrame", {
        Name = name .. "Container",
        Parent = self.contentContainer,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = self.theme.AccentColor,
        BorderSizePixel = 0,
        Visible = false
    })
    
    local contentLayout = createInstance("UIListLayout", {
        Parent = tab.container,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    local contentPadding = createInstance("UIPadding", {
        Parent = tab.container,
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    })
    
    -- Handle tab button click
    tab.button.MouseButton1Click:Connect(function()
        self:SelectTab(tab)
    end)
    
    -- Auto-update canvas size
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tab.container.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Add tab to tabs table
    table.insert(self.tabs, tab)
    
    -- If this is the first tab, select it
    if #self.tabs == 1 then
        self:SelectTab(tab)
    end
    
    -- Return tab object with methods
    return {
        -- Add a section to the tab
        AddSection = function(sectionName)
            return self:AddSection(tab, sectionName)
        end
    }
end

-- Select a tab
function UILibrary:SelectTab(tab)
    -- Deselect current tab if there is one
    if self.activeTab then
        createTween(self.activeTab.button, {BackgroundColor3 = self.theme.Background}):Play()
        self.activeTab.container.Visible = false
    end
    
    -- Select new tab
    self.activeTab = tab
    createTween(tab.button, {BackgroundColor3 = self.theme.AccentColor}):Play()
    tab.container.Visible = true
    
    -- Update config
    self.config.selectedTab = tab.name
    self:SaveConfig()
end

-- Add a section to a tab
function UILibrary:AddSection(tab, name)
    local section = {}
    section.name = name
    section.collapsed = false
    section.elements = {}
    
    -- Create section frame
    section.frame = createInstance("Frame", {
        Name = name .. "Section",
        Parent = tab.container,
        BackgroundColor3 = self.theme.Foreground,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40), -- Initial height, will be updated
        AutomaticSize = Enum.AutomaticSize.Y
    })
    
    local sectionCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = section.frame
    })
    
    -- Create section header
    section.header = createInstance("Frame", {
        Name = "Header",
        Parent = section.frame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    -- Create section title
    section.title = createInstance("TextLabel", {
        Name = "Title",
        Parent = section.header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -50, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = name,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Create collapse button
    section.collapseButton = createInstance("TextButton", {
        Name = "CollapseButton",
        Parent = section.header,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = "-",
        TextColor3 = self.theme.TextColor,
        TextSize = 20
    })
    
    -- Create section content
    section.content = createInstance("Frame", {
        Name = "Content",
        Parent = section.frame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 0),
        AutomaticSize = Enum.AutomaticSize.Y
    })
    
    local contentLayout = createInstance("UIListLayout", {
        Parent = section.content,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    local contentPadding = createInstance("UIPadding", {
        Parent = section.content,
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    })
    
    -- Handle collapse button click
    section.collapseButton.MouseButton1Click:Connect(function()
        self:ToggleSection(section)
    end)
    
    -- Add section to tab's sections
    table.insert(tab.sections, section)
    
    -- Return section object with methods for adding elements
    return {
        -- Add a toggle
        AddToggle = function(toggleName, default, callback)
            return self:AddToggle(section, toggleName, default, callback)
        end,
        
        -- Add a button
        AddButton = function(buttonName, callback)
            return self:AddButton(section, buttonName, callback)
        end,
        
        -- Add a slider
        AddSlider = function(sliderName, min, max, default, callback)
            return self:AddSlider(section, sliderName, min, max, default, callback)
        end,
        
        -- Add a dropdown
        AddDropdown = function(dropdownName, options, default, callback)
            return self:AddDropdown(section, dropdownName, options, default, callback)
        end,
        
        -- Add a textbox
        AddTextbox = function(textboxName, default, callback)
            return self:AddTextbox(section, textboxName, default, callback)
        end,
        
        -- Add a label
        AddLabel = function(labelText)
            return self:AddLabel(section, labelText)
        end
    }
end

-- Toggle section collapse
function UILibrary:ToggleSection(section)
    section.collapsed = not section.collapsed
    
    section.content.Visible = not section.collapsed
    section.collapseButton.Text = section.collapsed and "+" or "-"
    
    -- Save to config
    if not self.config.collapsedSections then
        self.config.collapsedSections = {}
    end
    self.config.collapsedSections[section.name] = section.collapsed
    self:SaveConfig()
end

-- Add a toggle to a section
function UILibrary:AddToggle(section, name, default, callback)
    local toggle = {}
    toggle.name = name
    toggle.value = default or false
    toggle.callback = callback or function() end
    
    -- Create toggle container
    toggle.container = createInstance("Frame", {
        Name = name .. "Toggle",
        Parent = section.content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    -- Create toggle label
    toggle.label = createInstance("TextLabel", {
        Name = "Label",
        Parent = toggle.container,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, -50, 1, 0),
        Font = Enum.Font.SourceSans,
        Text = name,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Create toggle button background
    toggle.background = createInstance("Frame", {
        Name = "Background",
        Parent = toggle.container,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -40, 0.5, -10),
        Size = UDim2.new(0, 40, 0, 20)
    })
    
    local backgroundCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = toggle.background
    })
    
    -- Create toggle indicator
    toggle.indicator = createInstance("Frame", {
        Name = "Indicator",
        Parent = toggle.background,
        BackgroundColor3 = self.theme.TextColor,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 2, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16)
    })
    
    local indicatorCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = toggle.indicator
    })
    
    -- Create hitbox for better mobile support
    toggle.hitbox = createInstance("TextButton", {
        Name = "Hitbox",
        Parent = toggle.container,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = ""
    })
    
    -- Set initial state
    if toggle.value then
        toggle.background.BackgroundColor3 = self.theme.AccentColor
        toggle.indicator.Position = UDim2.new(1, -18, 0.5, -8)
    end
    
    -- Handle toggle click
    toggle.hitbox.MouseButton1Click:Connect(function()
        self:SetToggle(toggle, not toggle.value)
    end)
    
    -- Add to elements
    table.insert(section.elements, toggle)
    
    -- Add to config
    if not self.config.toggles then
        self.config.toggles = {}
    end
    self.config.toggles[name] = toggle.value
    
    -- Return toggle object
    return {
        Set = function(value)
            self:SetToggle(toggle, value)
        end,
        Get = function()
            return toggle.value
        end
    }
end

-- Set toggle value
function UILibrary:SetToggle(toggle, value)
    toggle.value = value
    
    -- Update visuals
    if value then
        createTween(toggle.background, {BackgroundColor3 = self.theme.AccentColor}):Play()
        createTween(toggle.indicator, {Position = UDim2.new(1, -18, 0.5, -8)}):Play()
    else
        createTween(toggle.background, {BackgroundColor3 = self.theme.Background}):Play()
        createTween(toggle.indicator, {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
    end
    
    -- Update config
    self.config.toggles[toggle.name] = value
    self:SaveConfig()
    
    -- Call callback
    toggle.callback(value)
end

-- Add a button to a section
function UILibrary:AddButton(section, name, callback)
    local button = {}
    button.name = name
    button.callback = callback or function() end
    
    -- Create button container
    button.container = createInstance("Frame", {
        Name = name .. "Button",
        Parent = section.content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    -- Create button
    button.button = createInstance("TextButton", {
        Name = "Button",
        Parent = button.container,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.SourceSans,
        Text = name,
        TextColor3 = self.theme.TextColor,
        TextSize = 14
    })
    
    local buttonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = button.button
    })
    
    -- Button animations
    button.button.MouseButton1Down:Connect(function()
        createTween(button.button, {BackgroundColor3 = self.theme.AccentColor}):Play()
    end)
    
    button.button.MouseButton1Up:Connect(function()
        createTween(button.button, {BackgroundColor3 = self.theme.Background}):Play()
    end)
    
    button.button.MouseLeave:Connect(function()
        createTween(button.button, {BackgroundColor3 = self.theme.Background}):Play()
    end)
    
    -- Handle button click
    button.button.MouseButton1Click:Connect(function()
        button.callback()
    end)
    
    -- Add to elements
    table.insert(section.elements, button)
    
    -- Return button object
    return {
        Fire = function()
            button.callback()
        end
    }
end

-- Add a slider to a section
function UILibrary:AddSlider(section, name, min, max, default, callback)
    local slider = {}
    slider.name = name
    slider.min = min or 0
    slider.max = max or 100
    slider.value = default or slider.min
    slider.callback = callback or function() end
    
    -- Ensure default is within min and max
    slider.value = math.clamp(slider.value, slider.min, slider.max)
    
    -- Create slider container
    slider.container = createInstance("Frame", {
        Name = name .. "Slider",
        Parent = section.content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 50)
    })
    
    -- Create slider label
    slider.label = createInstance("TextLabel", {
        Name = "Label",
        Parent = slider.container,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.SourceSans,
        Text = name,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Create value display
    slider.valueLabel = createInstance("TextLabel", {
        Name = "Value",
        Parent = slider.container,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -40, 0, 0),
        Size = UDim2.new(0, 40, 0, 20),
        Font = Enum.Font.SourceSans,
        Text = tostring(slider.value),
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Right
    })
    
    -- Create slider track
    slider.track = createInstance("Frame", {
        Name = "Track",
        Parent = slider.container,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 25),
        Size = UDim2.new(1, 0, 0, 5)
    })
    
    local trackCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = slider.track
    })
    
    -- Create slider fill
    slider.fill = createInstance("Frame", {
        Name = "Fill",
        Parent = slider.track,
        BackgroundColor3 = self.theme.AccentColor,
        BorderSizePixel = 0,
        Size = UDim2.new((slider.value - slider.min) / (slider.max - slider.min), 0, 1, 0)
    })
    
    local fillCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = slider.fill
    })
    
    -- Create slider thumb
    slider.thumb = createInstance("Frame", {
        Name = "Thumb",
        Parent = slider.track,
        BackgroundColor3 = self.theme.TextColor,
        BorderSizePixel = 0,
        Position = UDim2.new((slider.value - slider.min) / (slider.max - slider.min), -6, 0.5, -6),
        Size = UDim2.new(0, 12, 0, 12),
        ZIndex = 2
    })
    
    local thumbCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = slider.thumb
    })
    
    -- Create hitbox for better mobile support
    slider.hitbox = createInstance("TextButton", {
        Name = "Hitbox",
        Parent = slider.container,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 20),
        Size = UDim2.new(1, 0, 0, 20),
        Text = ""
    })
    
    -- Update slider function
    local function updateSlider(input)
        local sizeX = math.clamp((input.Position.X - slider.track.AbsolutePosition.X) / slider.track.AbsoluteSize.X, 0, 1)
        local value = slider.min + ((slider.max - slider.min) * sizeX)
        
        -- Round to integers if min and max are integers
        if slider.min % 1 == 0 and slider.max % 1 == 0 then
            value = math.round(value)
        else
            -- Round to 2 decimal places for floats
            value = math.round(value * 100) / 100
        end
        
        self:SetSlider(slider, value)
    end
    
    -- Handle slider interaction
    local isDragging = false
    
    slider.hitbox.MouseButton1Down:Connect(function(input)
        isDragging = true
        updateSlider({Position = Vector2.new(input.X, input.Y)})
    end)
    
    slider.hitbox.MouseMoved:Connect(function(input)
        if isDragging then
            updateSlider({Position = Vector2.new(input, 0)})
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    -- For mobile
    if isMobile then
        slider.hitbox.TouchMoved:Connect(function(_, position)
            updateSlider({Position = Vector2.new(position.X, position.Y)})
        end)
    end
    
    -- Add to elements
    table.insert(section.elements, slider)
    
    -- Add to config
    if not self.config.sliders then
        self.config.sliders = {}
    end
    self.config.sliders[name] = slider.value
    
    -- Return slider object
    return {
        Set = function(value)
            self:SetSlider(slider, value)
        end,
        Get = function()
            return slider.value
        end
    }
end

-- Set slider value
function UILibrary:SetSlider(slider, value)
    -- Clamp value
    value = math.clamp(value, slider.min, slider.max)
    slider.value = value
    
    -- Calculate position
    local percent = (value - slider.min) / (slider.max - slider.min)
    
    -- Update visuals
    slider.fill.Size = UDim2.new(percent, 0, 1, 0)
    slider.thumb.Position = UDim2.new(percent, -6, 0.5, -6)
    slider.valueLabel.Text = tostring(value)
    
    -- Update config
    self.config.sliders[slider.name] = value
    self:SaveConfig()
    
    -- Call callback
    slider.callback(value)
end

-- Add a dropdown to a section
function UILibrary:AddDropdown(section, name, options, default, callback)
    local dropdown = {}
    dropdown.name = name
    dropdown.options = options or {}
    dropdown.value = default or (options[1] or "")
    dropdown.callback = callback or function() end
    dropdown.open = false
    
    -- Create dropdown container
    dropdown.container = createInstance("Frame", {
        Name = name .. "Dropdown",
        Parent = section.content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 50), -- Height will be adjusted when opened
        ClipsDescendants = true
    })
    
    -- Create dropdown label
    dropdown.label = createInstance("TextLabel", {
        Name = "Label",
        Parent = dropdown.container,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.SourceSans,
        Text = name,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Create dropdown button
    dropdown.button = createInstance("TextButton", {
        Name = "Button",
        Parent = dropdown.container,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 25),
        Size = UDim2.new(1, 0, 0, 25),
        Font = Enum.Font.SourceSans,
        Text = dropdown.value,
        TextColor3 = self.theme.TextColor,
        TextSize = 14
    })
    
    local buttonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = dropdown.button
    })
    
    -- Create arrow icon
    dropdown.arrow = createInstance("TextLabel", {
        Name = "Arrow",
        Parent = dropdown.button,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -20, 0, 0),
        Size = UDim2.new(0, 20, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = "â–¼",
        TextColor3 = self.theme.TextColor,
        TextSize = 14
    })
    
    -- Create dropdown content
    dropdown.content = createInstance("Frame", {
        Name = "Content",
        Parent = dropdown.container,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 55),
        Size = UDim2.new(1, 0, 0, 0),
        Visible = false
    })
    
    local contentCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = dropdown.content
    })
    
    dropdown.optionsList = createInstance("ScrollingFrame", {
        Name = "OptionsList",
        Parent = dropdown.content,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = self.theme.AccentColor
    })
    
    local optionsLayout = createInstance("UIListLayout", {
        Parent = dropdown.optionsList,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 2)
    })
    
    -- Populate options
    for i, option in ipairs(dropdown.options) do
        local optionButton = createInstance("TextButton", {
            Name = "Option" .. i,
            Parent = dropdown.optionsList,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 20),
            Font = Enum.Font.SourceSans,
            Text = option,
            TextColor3 = self.theme.TextColor,
            TextSize = 14
        })
        
        -- Highlight selected option
        if option == dropdown.value then
            optionButton.TextColor3 = self.theme.AccentColor
        end
        
        -- Handle option click
        optionButton.MouseButton1Click:Connect(function()
            self:SetDropdown(dropdown, option)
            self:ToggleDropdown(dropdown, false)
        end)
        
        -- Hover effect
        optionButton.MouseEnter:Connect(function()
            if option ~= dropdown.value then
                createTween(optionButton, {BackgroundTransparency = 0.8, BackgroundColor3 = self.theme.AccentColor}):Play()
            end
        end)
        
        optionButton.MouseLeave:Connect(function()
            if option ~= dropdown.value then
                createTween(optionButton, {BackgroundTransparency = 1}):Play()
            end
        end)
    end
    
    -- Update canvas size
    optionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        dropdown.optionsList.CanvasSize = UDim2.new(0, 0, 0, optionsLayout.AbsoluteContentSize.Y)
    end)
    
    -- Handle dropdown button click
    dropdown.button.MouseButton1Click:Connect(function()
        self:ToggleDropdown(dropdown, not dropdown.open)
    end)
    
    -- Add to elements
    table.insert(section.elements, dropdown)
    
    -- Add to config
    if not self.config.dropdowns then
        self.config.dropdowns = {}
    end
    self.config.dropdowns[name] = dropdown.value
    
    -- Return dropdown object
    return {
        Set = function(value)
            self:SetDropdown(dropdown, value)
        end,
        Get = function()
            return dropdown.value
        end,
        Refresh = function(newOptions, keepValue)
            self:RefreshDropdown(dropdown, newOptions, keepValue)
        end
    }
end

-- Toggle dropdown open/close
function UILibrary:ToggleDropdown(dropdown, state)
    dropdown.open = state
    
    -- Calculate content height based on options
    local contentHeight = math.min(#dropdown.options * 22, 100)
    
    if state then
        -- Open dropdown
        dropdown.content.Visible = true
        createTween(dropdown.container, {Size = UDim2.new(1, 0, 0, 60 + contentHeight)}):Play()
        createTween(dropdown.content, {Size = UDim2.new(1, 0, 0, contentHeight)}):Play()
        createTween(dropdown.arrow, {Rotation = 180}):Play()
    else
        -- Close dropdown
        createTween(dropdown.container, {Size = UDim2.new(1, 0, 0, 50)}):Play()
        createTween(dropdown.content, {Size = UDim2.new(1, 0, 0, 0)}):Play()
        createTween(dropdown.arrow, {Rotation = 0}):Play()
        
        -- Hide content after animation
        delay(ANIMATION_SPEED, function()
            if not dropdown.open then
                dropdown.content.Visible = false
            end
        end)
    end
end

-- Set dropdown value
function UILibrary:SetDropdown(dropdown, value)
    dropdown.value = value
    dropdown.button.Text = value
    
    -- Update option colors
    for _, child in pairs(dropdown.optionsList:GetChildren()) do
        if child:IsA("TextButton") then
            if child.Text == value then
                child.TextColor3 = self.theme.AccentColor
            else
                child.TextColor3 = self.theme.TextColor
            end
        end
    end
    
    -- Update config
    self.config.dropdowns[dropdown.name] = value
    self:SaveConfig()
    
    -- Call callback
    dropdown.callback(value)
end

-- Refresh dropdown options
function UILibrary:RefreshDropdown(dropdown, newOptions, keepValue)
    dropdown.options = newOptions or {}
    
    -- Clear existing options
    for _, child in pairs(dropdown.optionsList:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    -- Set default value if not keeping current value or current value not in new options
    local valueExists = false
    for _, option in ipairs(dropdown.options) do
        if option == dropdown.value then
            valueExists = true
            break
        end
    end
    
    if not keepValue or not valueExists then
        dropdown.value = dropdown.options[1] or ""
        dropdown.button.Text = dropdown.value
    end
    
    -- Populate new options
    for i, option in ipairs(dropdown.options) do
        local optionButton = createInstance("TextButton", {
            Name = "Option" .. i,
            Parent = dropdown.optionsList,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 20),
            Font = Enum.Font.SourceSans,
            Text = option,
            TextColor3 = (option == dropdown.value) and self.theme.AccentColor or self.theme.TextColor,
            TextSize = 14
        })
        
        -- Handle option click
        optionButton.MouseButton1Click:Connect(function()
            self:SetDropdown(dropdown, option)
            self:ToggleDropdown(dropdown, false)
        end)
        
        -- Hover effect
        optionButton.MouseEnter:Connect(function()
            if option ~= dropdown.value then
                createTween(optionButton, {BackgroundTransparency = 0.8, BackgroundColor3 = self.theme.AccentColor}):Play()
            end
        end)
        
        optionButton.MouseLeave:Connect(function()
            if option ~= dropdown.value then
                createTween(optionButton, {BackgroundTransparency = 1}):Play()
            end
        end)
    end
    
    -- Update config
    self.config.dropdowns[dropdown.name] = dropdown.value
    self:SaveConfig()
end

-- Add a textbox to a section
function UILibrary:AddTextbox(section, name, default, callback)
    local textbox = {}
    textbox.name = name
    textbox.value = default or ""
    textbox.callback = callback or function() end
    
    -- Create textbox container
    textbox.container = createInstance("Frame", {
        Name = name .. "Textbox",
        Parent = section.content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 50)
    })
    
    -- Create textbox label
    textbox.label = createInstance("TextLabel", {
        Name = "Label",
        Parent = textbox.container,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.SourceSans,
        Text = name,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Create textbox input
    textbox.input = createInstance("TextBox", {
        Name = "Input",
        Parent = textbox.container,
        BackgroundColor3 = self.theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 25),
        Size = UDim2.new(1, 0, 0, 25),
        Font = Enum.Font.SourceSans,
        Text = textbox.value,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        ClearTextOnFocus = false
    })
    
    local inputCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = textbox.input
    })
    
    -- Textbox focused/unfocused effects
    textbox.input.Focused:Connect(function()
        createTween(textbox.input, {BackgroundColor3 = self.theme.Foreground}):Play()
    end)
    
    textbox.input.FocusLost:Connect(function(enterPressed)
        createTween(textbox.input, {BackgroundColor3 = self.theme.Background}):Play()
        self:SetTextbox(textbox, textbox.input.Text)
    end)
    
    -- Add to elements
    table.insert(section.elements, textbox)
    
    -- Add to config
    if not self.config.textboxes then
        self.config.textboxes = {}
    end
    self.config.textboxes[name] = textbox.value
    
    -- Return textbox object
    return {
        Set = function(value)
            self:SetTextbox(textbox, value)
        end,
        Get = function()
            return textbox.value
        end
    }
end

-- Set textbox value
function UILibrary:SetTextbox(textbox, value)
    textbox.value = value
    textbox.input.Text = value
    
    -- Update config
    self.config.textboxes[textbox.name] = value
    self:SaveConfig()
    
    -- Call callback
    textbox.callback(value)
end

-- Add a label to a section
function UILibrary:AddLabel(section, text)
    local label = {}
    label.text = text
    
    -- Create label container
    label.container = createInstance("Frame", {
        Name = "Label",
        Parent = section.content,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20)
    })
    
    -- Create label text
    label.textLabel = createInstance("TextLabel", {
        Name = "Text",
        Parent = label.container,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.SourceSans,
        Text = text,
        TextColor3 = self.theme.TextColor,
        TextSize = 14,
        TextWrapped = true
    })
    
    -- Auto adjust height based on text
    label.textLabel:GetPropertyChangedSignal("TextBounds"):Connect(function()
        label.container.Size = UDim2.new(1, 0, 0, label.textLabel.TextBounds.Y + 5)
    end)
    
    -- Add to elements
    table.insert(section.elements, label)
    
    -- Return label object
    return {
        Set = function(newText)
            label.text = newText
            label.textLabel.Text = newText
        end,
        Get = function()
            return label.text
        end
    }
end

-- Save config to file
function UILibrary:SaveConfig()
    -- Use HttpService to encode the config to JSON
    local success, encoded = pcall(function()
        return HttpService:JSONEncode(self.config)
    end)
    
    if success then
        -- Save to GlobalSettings (persists across game sessions)
        pcall(function()
            writefile("UILibraryConfig_" .. self.configID .. ".json", encoded)
        end)
    end
end

-- Load config from file
function UILibrary:LoadConfig()
    -- Check if config file exists
    pcall(function()
        if isfile("UILibraryConfig_" .. self.configID .. ".json") then
            local content = readfile("UILibraryConfig_" .. self.configID .. ".json")
            local success, decoded = pcall(function()
                return HttpService:JSONDecode(content)
            end)
            
            if success then
                self.config = decoded
            end
        end
    end)
end

-- Apply config
function UILibrary:ApplyConfig()
    -- Apply selected tab
    if self.config.selectedTab then
        for _, tab in ipairs(self.tabs) do
            if tab.name == self.config.selectedTab then
                self:SelectTab(tab)
                break
            end
        end
    end
    
    -- Apply collapsed sections
    if self.config.collapsedSections then
        for _, tab in ipairs(self.tabs) do
            for _, section in ipairs(tab.sections) do
                if self.config.collapsedSections[section.name] ~= nil then
                    if self.config.collapsedSections[section.name] ~= section.collapsed then
                        self:ToggleSection(section)
                    end
                end
            end
        end
    end
    
    -- Apply toggles
    if self.config.toggles then
        for _, tab in ipairs(self.tabs) do
            for _, section in ipairs(tab.sections) do
                for _, element in ipairs(section.elements) do
                    if element.name and self.config.toggles[element.name] ~= nil then
                        if element.value ~= nil then  -- Check if it's a toggle
                            self:SetToggle(element, self.config.toggles[element.name])
                        end
                    end
                end
            end
        end
    end
    
    -- Apply sliders
    if self.config.sliders then
        for _, tab in ipairs(self.tabs) do
            for _, section in ipairs(tab.sections) do
                for _, element in ipairs(section.elements) do
                    if element.name and self.config.sliders[element.name] ~= nil then
                        if element.min ~= nil and element.max ~= nil then  -- Check if it's a slider
                            self:SetSlider(element, self.config.sliders[element.name])
                        end
                    end
                end
            end
        end
    end
    
    -- Apply dropdowns
    if self.config.dropdowns then
        for _, tab in ipairs(self.tabs) do
            for _, section in ipairs(tab.sections) do
                for _, element in ipairs(section.elements) do
                    if element.name and self.config.dropdowns[element.name] ~= nil then
                        if element.options ~= nil then  -- Check if it's a dropdown
                            self:SetDropdown(element, self.config.dropdowns[element.name])
                        end
                    end
                end
            end
        end
    end
    
    -- Apply textboxes
    if self.config.textboxes then
        for _, tab in ipairs(self.tabs) do
            for _, section in ipairs(tab.sections) do
                for _, element in ipairs(section.elements) do
                    if element.name and self.config.textboxes[element.name] ~= nil then
                        if element.input ~= nil then  -- Check if it's a textbox
                            self:SetTextbox(element, self.config.textboxes[element.name])
                        end
                    end
                end
            end
        end
    end
end

-- Return the library
return UILibrary